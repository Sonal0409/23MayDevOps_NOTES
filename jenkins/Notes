# cd
# pwd
************************************
JAVA Installation

SEE THAT YOU ARE IN ROOT DIRECTORY

# yum install java-1.8.0-openjdk-devel

Install jenkins
*********************

Specific OS : CENTOS

go to https://www.jenkins.io/

Execute the 2 commands

  sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
  sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key

execute command install jenkins

 yum install jenkins -y


Start Jenkins Server:
****************

systemctl start jenkins --> Centos

OR 

service jenkins start ---> ubuntu(lab)


Go to browser

public ip:8080

 cat /var/lib/jenkins/secrets/initialAdminPassword
 
 
get password-==? paste on dashboard

Click on install suggested plugins
Give username and password details

username:  admin
password: admin

Jenkisn is ready to use

reation of a Job:
************************************

#1 Jenkins --> New Item --> Job1 --> Build --> shell comand---> echo 'this is my first job'

Save --> click on Build Now  --> click on build number --> click on Console to see output

#2 Jenkins --> New Item --> Job2 --> Build --> shell comand---> 
date >> /tmp/date.txt
echo 'this is my second job'

Save --> click on Build Now  --> click on build number --> click on Console to see output

*****************************************
TRIGGERS

TRIGGERS

If we want to automatically trigger a Job

Build triggers for any job:

1. Trigger builds remotely (e.g., from scripts)

Select the above very first option
give Authentication token as : token1 
any unique token number

And then copy the path provided below in this format:
JENKINS_URL/job/job4/build?token=TOKEN_NAME 


update the above url in this way:
Jenkins_URL: Curent url :http://3.140.252.165:8080
Token_NAME: token number/name provided above

Take this path and execute on anyother browser.

http://3.140.252.165:8080//job/job4/build?token=token1

Login as admin admin
you can run that job.

2. GitHub hook trigger for GITScm polling

> Select the above option

Save the job and now go to git hub

Always save the job and then only  go to git hub, perform these steps

go to the repository setting
select webhooks on left side
delete if any exisitng webhook

click on createwebhook on right side

provide following information:

Payload URL : jenkinsurl/github-webhook/ ===> http://3.140.252.165:8080/github-webhook/

Content type : select application/json

Secret: no need of any value

Which events would you like to trigger this webhook?

select first option -- Just the push event.

Select Active
click on add webhook.

now make some changes in repo,
go to jenkins--> you will see a new build has been created

3. Trigger prieodically

Create anew Job--> build trigger--> build preodically --> give */2 * * * * --> Save and build now
All build will be genrated automatically every 2 mins

4. Trigger by POLL SCM

Create a new Job-->Source code management--> Add git path

https://github.com/Sonal0409/GITHUBJENKINSDEMO

Build Triggers--> Poll SCM --> * * * * *

Build will be generated each time there is a chnage in the repository only.

*********************************



*********************

If we want to automatically trigger a Job

1. Trigger prieodically

Create anew Job--> build trigger--> build preodically --> give */2 * * * * --> Save and build now
All build will be genrated automatically every 2 mins

2. Trigger by POLL SCM

Create a new Job-->Source code management--> Add git path

https://github.com/Sonal0409/GITHUBJENKINSDEMO

Build Triggers--> Poll SCM --> * * * * *

Build will be generated each time there is a chnage in the repository only.


**************************


 $ mvn --version

Jenkins--> Manage Jenkins-->Global Tool configuration

Go to JDK section
In this give:
1. Uncheck -- install automatically
2. JDK name as myjava

3 go to terminal/server ==> mvn --version

4. copy the value of variable java Home

JAVA_HOME =

/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.265.b01-1.amzn2.0.1.x86_64

5. Add in jenkins also

Under GIT==> leave it same 

Under maven ==> lets install it automatically
Type mymaven and check the install automatically box.
Save the changes


All set to create pipelines

Upstream downstream pipeline for bUild
************************

1. new Job --complie-->freestyle project
2. Source code management --> select git
--->give git path ===> https://github.com/Sonal0409/DevOpsClassCodes.git

3. build ==> select invoke top level maven targets
   select maven version===> mymaven
    goal ==> compile
4. save ==> build now 
So all the compiled files will be present at this location
==> look for this line in console output at the end on jenkins
Compiling 13 source files to /var/lib/jenkins/workspace/compile1/target/classes


******************************
2nd JOB ==>Code Review
*********************

Jenkins--> new item--> Name= code Review==> freestyle project
==> source codemanagement==>select git==> 
give git repo name https://github.com/Sonal0409/DevOpsClassCodes

Step 2: build ==> invoke top level maven target==>
 select maven version==>mymaven ==> goal = pmd:pmd

save==> build now
==> click on build number and see the console

Goto Workspace on the left side of jenkins Job code review
In the folder go to ==> target folder ==> you will find pmd.xml file.

CONVERT FILE TO TREND REPORT
*******************************
 manage jenkins--> manage plugins--> available --> Search for pmd plugin--> install it.

Now go to the job Code Review==> go to post build actions ==> select Publish PMD anaylsys report

under PMD results==> give path of pmd.xml file ie:  target/pmd.xml

Save the file and build now.

After the build is successfull, you will see PMD Warnings

So you will see 12 new warning have been generated on the code.
Scroll down 
Under package click on first one to check warnings.

*********************************
JOB3: Testing --Unit Test report
********************************

1. jenkins--> new item--> Name= unitTest==> freestyle project
==> source codemanagement==>select git==> give git repo name https://github.com/Sonal0409/DevOpsClassCodes

2. build ==> invoke top level maven target==> select maven version==>mymaven ==> goal = test

3. Save and Build now.

4. Check the workspace

5. surefire-reports will be present

But we cannot understand them easily. So lets generate understandable reports by using Junit reports option under post build actions

6. Go back to job==> post build actions==> select junit test result job
==> give target/surefire-reports/*.xml  ===>under test report xml
This is path where xml files are there.
Here *.xml is as we want to use all the xml files

7. Save and build again

Go to build number ===> on left side you will see Test Result 
Click on it and you can see all pass and fail details of the tests

**************************
JOB4 : Metric check
************************

1. Go to jenkins--> new item--> Name= Metriccheck==> freestyle project
==> source codemanagement==>select git==> give git repo name https://github.com/Sonal0409/DevOpsClassCodes

2.  build ==> invoke top level maven target==> select mymaven
    goal = cobertura:cobertura -Dcobertura.report.format=xml

3.==> save==> build now
==> click on build number and see the console

4. go to Workspace ==> target/site/cobertura/coverage.xml  

The xml file will be there, But we cannot understand them easily. So lets generate understandable reports by downloading cobertura plugin

Go to manage jenkins--> manage plugins--> cobertura --> install it

Go back to the job--> post build actions--> select publish cobertura coverage report
Under cobertura xml pattern give ==> target/site/cobertura/coverage.xml   ==> you can take the path from below displayed text.

Save and build again
Click build number ==> on left side you will find Coverage Report==> click on it ==> we cna see the coverage report.

**********************************
Job5 Package Job
***************************

Go to jenkins--> new item--> Name= Package==> freestyle project
==> source codemanagement==>select git==> give git repo name https://github.com/Sonal0409/DevOpsClassCodes
 
build ==> invoke top level maven target==>mymaven

 goal = package

==> save==> build now
==> click on build number and see the console

==> go to workspace ==> target/addressbook.war



Install plugin build pipeline and then configure it to see pipeline view

*************************************************

Sceanrio1:

Create a Code based pipeline
 
   Compile==>codeReview==>unitTest==>Coverage==>Package

Can be written in 2 ways
 > scripted pipeline syntax

 > declarative pipeline syntax
    > very easy to read & write
    > no major programming or scripting skills not required
    > code is written in a declartive format
       name sonal
       trainer devops
       git "https:/git/sonal0409/myrepo.git"
       sh 'mvn compile"
    > execute the code, jenkins will first validate the code, give you syntax errors and then finally run the code
    > it provides a fixed structure, used needs to write the declarations
    > for writing the pipeline code, the jenkins template used is Pipeline instead of Free style project

lets write the pipeline code:

Step 1. for writing the pipeline code, the jenkins template used is Pipeline instead of Free style project

Pipeline consists of set of tasks to be executed one after the other

Compile==>codeReview==>unitTest==>Coverage==>Package

Code pipeline following sections should be mentioned:

1. pipeline will always start with "pipeline"

2. pipeline will then have tools section : it will jenkins which tools to use while executing the tasks


here declare the tools to used to execute the pipeline
  
tool 'nameoftool'   # name that you provided in global tool configuration
for eg:

  tools{
 jdk  'myjava'
 maven 'mymaven'
}

3. agent ==> the server on which the tasks have to be executed

 for eg:  agent any ==> exeucte the tasks on the current machine

4. tasks to be executed==> they are called as stages in pipeline

   stages will have multiple stage sections
   
  each stage section represents a job
  
  every stage will have a section ==> steps to execute the job

 stages{   

   stage('nameStage1')  ==> stage = task
    {
     steps{
     steps to be build
  }

    }

  stage('nameStage2')  ==> stage = task
    {
     steps{
     steps to be build
  }

    }
  stage('nameStage3')  ==> stage = task
    {
     steps{
     steps to be build
  }

    }

}





Pipeline code:

pipeline{
    tools{
        jdk 'myjava'
        maven 'mymaven'
    }
    agent any
    
    stages{
        stage('Checkout SCM')
        {
            steps{
                
            git 'https://github.com/Sonal0409/DevOpsClassCodes.git'
            
            }
        }
        stage('Compile')
        {
            steps{
                
                sh 'mvn compile'
            }
        }
          stage('CodeReview')
        {
            steps{
                
                sh 'mvn pmd:pmd'
            }
        }
        
    stage('UnitTesting')
        {
            steps{
                
                sh 'mvn test'
            }
        }  
       stage('Code Coverage')
        {
            steps{
                
                sh 'mvn cobertura:cobertura -Dcoberture.report.format=xml'
            }
        }     
          stage('Package')
        {
            steps{
                
                sh 'mvn package'
            }
        }  
        
        
         
    }
}






Version Control the pipeline code

> we can use Jenkinsfile to version control the pipeline code

> Jenkinsfile is a text file
  user will write pipeline code inside this file
> this file is maintained in github
> jenkins pipeline job will be configured to collect the jenkinsfile and exeucte it

Advantage:

every user can edit the file form github
no need to log onto jenkins server
every chnage done to the file is available
we can reuse the jenkins file under different jenkins pipeline projects/jobs


How to use jenkins file:

> create a new job ---> pipeline template

Master & Slave Set up in jenkins

************************************************888
Complete set on Slave machine

 > 1 ec2 machine of linux OS
  > select correct key pain
  > create security group rule --all traffic, anywhere
 
connect to server

$ sudo su -

 > install git 
  yum install git -y

 > install java

yum install java-1.8.0-openjdk-devel

> install maven

yum install maven


Create the workspace directory also known as root directory

 $ cd /tmp

 $ mkdir jenkinsdir

 $ cd jenkinsdir

 $ pwd   ==>it will give present working directory==> /tmp/jenkinsdir

 $ chmod -R 777 /tmp/jenkinsdir   ==> read write permission to directory




windows Slave:
**************************

************************************
Master and Slave Set up

restart the instance.
Restart the jenkins server
now take public ip and loginto jenkins

Step 1: Go to Manage Jenkins ---> CONFIGURE SYSTEM ---> Check the Jenkins URL is same as URL of browser --> Save
Step 2: Go to Manage Jenkins---> CONFIGURE GLOBAL SECURITY --> Scroll down to AGENTS-->select RANDOM radiobutton--> Save
Step 3: Go to Manage Jenkins---> MAnage Nodes and Clouds  --> New Node

Select New Node--> give name as Winslave--> select radio button permanamet Agent

Name : winslave
Description: give windows 10 machine 
==> # of executors = 1 ==> means number of jobs that we want to run on this slave node. Let it be 1 for now
===> Remote root directory ==> C:\jenkinsdir
Location of a directory folder on your windows machine , so that jenkins can create a workspace folder and store all the files. As we have seen earlier while executiong jobs.
For this --> got to C drive and create an emapty folder.
C:\jenkinsdir

====>  Label : win_slave ==> this is like a tag to slave machine. This is how we will identify the slave machine--> remeber this

===> Usage: 
Select 2nd option: Only build jobs with label expressionmatching the job :
This means for which ever job we will give label as win_slave that job only will run on this job.

===> Launch Method : select option : Launch agent by connecting to master.

Scroll down

Add tools

Add git path as C:\Program Files\Git\cmd\git.exe
Add java path as C:\Program Files (x86)\Java\jdk1.8.0_191

SAVE the job.

Now go to win_slave ==> download the agent.jar file and put it in your jenkinsdir folder.

Copy the path and change the public ip in below path
java -jar agent.jar -jnlpUrl http://3.139.60.71:8080/computer/winslave/slave-agent.jnlp -secret 61e8e20badd531b48caeffac8d686f182eb2d77a1c303ee39c5db9d00117c0be -workDir "C:\jenkinsdir"

Go to bash and start jenkins, refresh instance
Go to cmd prompt
change to cd c:\jenkinsdir
copy the above jenkins agent path
System will get connected.

***************************************
RUN a job on Agent

Go to Dashboard

Select the package job---> configure --> GENERAL --> click on Restrict where this project can be run and enter win_slave  

SAVE THE JOB

CLICK on BUILD NOW -- to start the build

CLick on build number--> got to console --to check it is executing on AGent

Go to C folder-->jekinsdir---> C:\jenkinsdir\workspace\package\target==> 
you will see addressbook.war file.




