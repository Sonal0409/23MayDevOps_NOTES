to connect to ec2 instance over ssh

Command:

ssh -i "keyfile.pem" ec2-user@publicip of the server


Install git:

$ sudo su -

yum install git -y

git --version


Scenario 1:


Create a working a working directory

$ sudo su -

$ mkdir myproject

$ ls

go inside the folder

$ cd myproject

Create a new file in the directory

$ touch index1.html

Scenario 2:

Create the local repo
***********************
$ git init

$ ls -al ==> . git folder is available

Scenario 3:
**************
git configuration to set up a username and email address

3 types:
 system : configuration of git done for entire system
 global : configuration of git done for that particular user you are logged into the server(root)
 local : configuration of git done for that particular folder (myproject)

$ git config --global user.name sonal0409

$ git config --global user.email mittal.sonal04@gmail.com

Interview questions:

1. List all the config done by you on your git repo

 $ git config --list

Where is this config saved- in which file

 --global config will be save : ~/.gitconfig

 $ cat ~/.gitconfig


Scenario 4:
*******************

Add the file from working directory to stagging area

 $ git status

 $ git add index1.html

 $ git status

 $ git commit -m "added file"

 $ git ls-files  ==> see if file is in local repo or not
 
 
Scenario 6: git log

$ git log
$ git log --oneline

$ git show <commitid>

$ git show 8020b67

Assignment: Interview Question:

Save the commit history in a txt file

$ git log >> /pathoffile/filename.txt


**********
Scenario 6: Modify an exisitng file, which is already in Local repo

add the modification to LR

$ nano index1.html

add some lines

ctl X ==> y ==> press enter

OR

$ vim index1.html

add some lines

press esc ==> :wq! 


Chnages==> file1 file2 index1 index2


1 method:

$ git add index1.html
$ git commit -m "modification"


add all the modification to LR

2nd method:(using -a option: add all the changes & commit it)

$ git commit -a -m "modification index2.html"


************

Scenario 7: to check difference between 2 version of a file

$ git diff filename

$ git diff commit1 commit2


********************************************************
Scenario6: Deletion of file

- Deletion of file from WD & local repo

# git rm file1
# git status
# git commit -m "deletion of file1"
# ls
# git ls-files

- Deletion of file local repo only

# git rm --cached file2
# git commit -m "deteled file from local"
# git status    // file will be untracked
# ls
# git ls-files

# add the untracked file to local repo


*****************************************

If chnages are in stagging area and you have to work on them again--you need to rewrite the code

We need to unstage the changes, so as to write code again

$ git reset HEAD filename

OR

$ git restore --staged <file>

all chnages form stagging area==> move back to working directory(unstagged)

***************************************
 to discard changes in working directory
if changes of an existing file(tracked by git)  are to be removed
ie: remove the modifications from working directory using a git command

$ git checkout -- index2.html

OR 

$ git restore <file>.


permanently delete the changes

******************************************

***********************************************************


Scenario7: Ignoring Files

# vim log
# git status  // file untracked
# vim .gitignore   // add name of file "log" , which wil be noe ignored
# git status   // log will be ignored and .gitignore untracked
# git add .gitignore
# git commit -m "added ignore file"
# git status // working tress has to be clean

***********************************************************

Scenario 8: Reverting the changes:

# vim file3  // create a new files
# git add file3
# git commit -m "added file3"

//Delete the file

# git rm file3
# git commit -m "deleted file3"
# ls
# git ls-files

# git log --oneline    // last commit id is of delete action, copy it
// lets revert the commit

# git revert commit id

// file back to WD and local
# ls
# git ls-files


*******************************************************************

Branching

# git status ==> shows master branch
# git branch b1     // copies all files form master
# git status
# git checkout b1
# git status  
 // On branch b1

# git ls-files // all files same as master on b1
# git log --oneline // all commit same as master 

Create a file on branch b1

# vim file4 
# git add file4
# git commit -m "added file4"
# git ls-files
# git log --oneline   // 1 new commit which is not on master right now


Merging a file from branch b1 to master

# git checkout master
# git ls-files
# git merge b1 master  // merge from source b1 to destination master
# git ls-files
# git log --oneline

************************************************************

********************************************************
STASHING of files on GIT


# git status ==> * indicates we are on master branch
# vim exitingfileName ==> inster new code for signout button ==>esc ==> :wq!



# git status ==> changes that are untracked and we donâ€™t want to commit them right now.

So stash them on temporary space:

# git stash   ==> all the untracked changes will be moved to temperory space

Where is this temporary space?

# git stash list   ==> will give list of chnages stashed 


# git show stashnumber  ==> give stash number


GET changes back from stash ===> UNSTASHING

# git stash pop stash@{0}   ==> will revert back all untracked file chnages
After unstashing, the files will be dropped from temperory shelves. 

  OR
# git stash apply statsh@{0}   ==> will revert back chnages from temperory shelves to working directory
// and files still remains on temperory shelves if needed latter in other branches.

# git statsh list ==> nothing will be there  on executing stash pop.

****************************************

Configuring Local machine to GITHUB account

whenever we want changes that we have in local repository to be pushed in remote repo on github

we have to be authenticate

communicate from local to github ---> 

1. username/personal access token over https

2. over ssh


passwordless authentication:

generate ssh key on your local system


 ssh-keygen

press enter 3 times

key will be generated

cat /root/.ssh/id_rsa.pub

go to github --> settings --> ssh & GPG keys --> new ssh key

add the key in github and save

Scenario 2:

Create a remote repository
**********

Done

Scenario 3:

Push the chnages from local to remote

git push origin master

pull & fetch changes

git pull origin master

git fetch origin master

Cloning

git clone <remotereponame>

git clone https://github.com/Sonal0409/18Apr-ClassNotes

Forking.
Click on fork button on another users repo to perform forking

